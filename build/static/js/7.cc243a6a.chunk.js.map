{"version":3,"sources":["components/Button/WhiteButton.tsx","components/ColoredScrollbars/ColoredScrollbarsColor.tsx","components/ColoredScrollbars/index.tsx","pages/ImagesPage/FocusButtonBase.tsx","pages/ImagesPage/index.tsx","pages/GalleryPage/index.tsx"],"names":["WhiteButton","styled","Button","background","Colors","white","backgroundColor","ColorTranslator","dark","setA","RGBA","hex","black","ColoredScrollbarsColor","div","ColoredScrollbars","props","autoHeightMin","renderThumbVertical","useStyles","makeStyles","createStyles","button","left","position","transform","display","width","opacity","FocusButtonBase","children","onDoubleClick","classes","ButtonBase","focusRipple","className","onClick","root","flexWrap","justifyContent","overflow","section","load","filter","pointerEvents","loadProgress","top","zIndex","icon","color","cursor","toolbarLast","marginTop","img","imgResponsive","maxWidth","height","margin","gridListTileBar","bottom","gridListTileBarExtraSmall","paddingLeft","paddingRight","muiGridListTileBarTitle","fontWeight","fontSize","lineHeight","muiGridListTileBarTitleWrap","marginLeft","AddButton","borderRadius","padding","ImagesPage","tile","useSelector","tileData","dispatch","useDispatch","isTile","length","screenExtraLarge","useScreenMediaQuery","screenLarge","screenMedium","screenSmall","screenExtraSmall","screenNarrow","useMediaQuery","handleDoubleClick","useCallback","assetId","tagId","setSinglePage","setSinglePageTagId","style","Toolbar","GridList","cellHeight","cols","spacing","map","GridListTile","src","alt","description","GridListTileBar","title","undefined","titleWrap","actionIcon","aria-label","variant","startIcon","SinglePage","lazy","textAlign","action","fontStyle","letterSpacing","textTransform","boxShadow","actionOutlined","primary","toolbarAction","minHeight","marginBottom","formControl","formSelect","borderColor","transparent","select","selectIcon","notAvailable","Border","GalleryPage","isLoadTileData","getLoadTileData","useState","album","setAlbum","seIsTile","isSingle","isSinglePage","useEffect","CircularProgress","setDownloadFile","script","document","querySelector","remove","FormControl","Select","labelId","id","value","onChange","event","target","MenuItem","fallback","Typography","align"],"mappings":"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","file":"static/js/7.cc243a6a.chunk.js","sourcesContent":["import Button from '@material-ui/core/Button';\nimport { styled } from '@material-ui/core/styles';\nimport Colors, { ColorTranslator } from '../../constants/Colors';\n\nconst WhiteButton = styled(Button)({\n    background: Colors.white,\n    '&:hover': {\n        backgroundColor: `${new ColorTranslator(Colors.dark).setA(0.04).RGBA}`,\n    },\n});\n\nexport default WhiteButton;\n","import Colors from '../../constants/Colors';\nimport styled from 'styled-components';\nimport { ColorTranslator } from 'colortranslator';\n\nconst hex = new ColorTranslator(Colors.black).setA(0.38).RGBA;\n\nconst ColoredScrollbarsColor = styled.div`\n    background: ${hex};\n    border-radius: 2px;\n`;\n\nexport default ColoredScrollbarsColor;\n","import React, { ReactNode } from 'react';\nimport { Scrollbars } from 'react-custom-scrollbars';\n\nimport ColoredScrollbarsColor from './ColoredScrollbarsColor';\n\ntype ScrollbarsProps = {\n    style?: any;\n    children?: ReactNode;\n};\n\nconst ColoredScrollbars = (props: ScrollbarsProps): JSX.Element => {\n    return (\n        <Scrollbars\n            autoHeightMin={509}\n            // autoHeightMax=\"calc(80vh - 36px - 35px - 75px)\"\n            renderThumbVertical={(props) => <ColoredScrollbarsColor {...props} />}\n            {...props}\n        />\n    );\n};\n\nexport default ColoredScrollbars;\n","import React, { ReactNode } from 'react';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport ButtonBase from '@material-ui/core/ButtonBase';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        button: {\n            left: '50%',\n            position: 'relative',\n            transform: 'translateX(-50%)',\n            display: 'inline-block',\n            width: '100%',\n            '&:hover .focusHighlight': {\n                opacity: 0.04,\n            },\n            '& .is-focused': {\n                '& img': {\n                    opacity: 0.8,\n                },\n            },\n        },\n    }),\n);\n\ntype Props = {\n    children: ReactNode;\n    onDoubleClick: () => void;\n};\n\nconst FocusButtonBase = ({ children, onDoubleClick }: Props): JSX.Element => {\n    const classes = useStyles();\n\n    return (\n        <ButtonBase focusRipple className={classes.button} onClick={onDoubleClick}>\n            <div>{children}</div>\n        </ButtonBase>\n    );\n};\n\nexport default FocusButtonBase;\n","import React, { FC, useCallback } from 'react';\nimport { createStyles, makeStyles, styled } from '@material-ui/core/styles';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { useSelector, useDispatch } from 'react-redux';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport WhiteButton from '../../components/Button/WhiteButton';\nimport AddIcon from '@material-ui/icons/Add';\nimport ColoredScrollbarsColor from '../../components/ColoredScrollbars';\nimport { tileData, setSinglePage, setSinglePageTagId } from '../../store/gallerySlice';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport Colors, { ColorTranslator } from '../../constants/Colors';\nimport FocusButtonBase from './FocusButtonBase';\nimport { useScreenMediaQuery } from '../../utils/MediaQuery';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        root: {\n            display: 'flex',\n            flexWrap: 'wrap',\n            justifyContent: 'space-around',\n            overflow: 'hidden',\n        },\n        section: {\n            position: 'relative',\n        },\n        load: {\n            filter: 'blur(4px)',\n            pointerEvents: 'none',\n        },\n        loadProgress: {\n            position: 'absolute',\n            left: 'calc(50% - 48px)',\n            top: 'calc(50% - 48px)',\n            zIndex: 1,\n        },\n        icon: {\n            color: new ColorTranslator(Colors.black).setA(0.87).RGBA,\n            cursor: 'pointer',\n        },\n        toolbarLast: {\n            marginTop: 30,\n        },\n        img: {\n            left: '50%',\n            position: 'relative',\n            transform: 'translateX(-50%)',\n            display: 'inline-block',\n            width: '100%',\n        },\n        imgResponsive: {\n            maxWidth: '100%',\n            height: 'auto',\n            display: 'block',\n            margin: 'auto',\n        },\n        gridListTileBar: {\n            background: Colors.white,\n            bottom: 50,\n        },\n        gridListTileBarExtraSmall: {\n            paddingLeft: 30,\n            paddingRight: 30,\n        },\n        muiGridListTileBarTitle: {\n            color: new ColorTranslator(Colors.black).setA(0.87).RGBA,\n            fontWeight: 'normal',\n            fontSize: 14,\n            lineHeight: '24px',\n        },\n        muiGridListTileBarTitleWrap: {\n            marginLeft: 0,\n        },\n    }),\n);\n\nconst AddButton = styled(WhiteButton)({\n    borderRadius: 23,\n    marginLeft: 'auto',\n    padding: '12px 25px',\n});\n\ntype ListItemsProps = {\n    img: string;\n    description: string;\n    assetId: number;\n    tagId: number;\n};\n\nconst ImagesPage: FC = () => {\n    const tile = useSelector(tileData);\n    const dispatch = useDispatch();\n    const classes = useStyles();\n\n    const isTile = tile.length;\n\n    const screenExtraLarge = useScreenMediaQuery('xl');\n    const screenLarge = useScreenMediaQuery('lg');\n    const screenMedium = useScreenMediaQuery('md');\n    const screenSmall = useScreenMediaQuery('sm');\n    const screenExtraSmall = useScreenMediaQuery('xs');\n    const screenNarrow = useMediaQuery('(max-width:340px)');\n\n    const getScreenWidth = () => {\n        if (screenExtraLarge) {\n            return 4;\n        } else if (screenNarrow) {\n            return 2;\n        } else if (screenLarge) {\n            return 4;\n        } else if (screenMedium) {\n            return 2;\n        } else if (screenSmall) {\n            return 2;\n        } else if (screenExtraSmall) {\n            return 1;\n        } else {\n            return 3;\n        }\n    };\n\n    /**\n     * pass the parameter to go to a single page of the assetId image = dabId\n     * @param assetId\n     * @param tagId\n     */\n    const handleDoubleClick = useCallback((assetId: number, tagId: any): void => {\n        dispatch(setSinglePage(assetId));\n        dispatch(setSinglePageTagId(tagId));\n    }, []);\n\n    return (\n        <section>\n            <ColoredScrollbarsColor style={{ height: isTile ? 761 : 0 }}>\n                <Toolbar>\n                    <div className={classes.root}>\n                        <GridList cellHeight={400} cols={getScreenWidth()} spacing={18}>\n                            {isTile &&\n                                tile.map((tile: ListItemsProps) => (\n                                    <GridListTile key={tile.assetId}>\n                                        <FocusButtonBase\n                                            onDoubleClick={() => handleDoubleClick(tile.assetId, tile.tagId)}\n                                        >\n                                            <img\n                                                src={tile.img}\n                                                alt={tile.description}\n                                                className={classes.imgResponsive}\n                                            />\n                                        </FocusButtonBase>\n\n                                        <GridListTileBar\n                                            title={tile.description}\n                                            className={`${classes.gridListTileBar} ${\n                                                screenMedium ? classes.gridListTileBarExtraSmall : undefined\n                                            }`}\n                                            classes={{\n                                                title: classes.muiGridListTileBarTitle,\n                                                titleWrap: classes.muiGridListTileBarTitleWrap,\n                                            }}\n                                            actionIcon={\n                                                <FavoriteBorderIcon\n                                                    aria-label={`info about ${tile.description}`}\n                                                    className={classes.icon}\n                                                />\n                                            }\n                                        />\n                                    </GridListTile>\n                                ))}\n                        </GridList>\n                    </div>\n                </Toolbar>\n            </ColoredScrollbarsColor>\n            <Toolbar className={classes.toolbarLast}>\n                <AddButton variant=\"contained\" startIcon={<AddIcon />}>\n                    NEW\n                </AddButton>\n            </Toolbar>\n        </section>\n    );\n};\n\nexport default ImagesPage;\n","import React, { FC, ChangeEvent, useState, lazy, Suspense, useEffect } from 'react';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\nimport Colors from '../../constants/Colors';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Select from '@material-ui/core/Select';\nimport { isSinglePage, tileData, getLoadTileData, setSinglePage } from '../../store/gallerySlice';\n\nimport ImagesPage from '../../pages/ImagesPage';\nimport Typography from '@material-ui/core/Typography';\nimport { setDownloadFile } from '../../store/downloadSlice';\nconst SinglePage = lazy(() => import('../../pages/SinglePage'));\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        title: {\n            fontWeight: 'bold',\n            textAlign: 'center',\n        },\n        action: {\n            fontStyle: 'normal',\n            fontWeight: 500,\n            fontSize: 14,\n            letterSpacing: '1.25px',\n            textTransform: 'uppercase',\n            boxShadow: '0 0 0',\n            '&~ *': {\n                marginLeft: 19,\n            },\n        },\n        actionOutlined: {\n            color: Colors.primary,\n        },\n        toolbarAction: {\n            display: 'flex',\n            justifyContent: 'center',\n            minHeight: 55,\n            marginBottom: 19,\n        },\n        formControl: {\n            width: 304,\n        },\n        formSelect: {\n            '&:before': {\n                borderColor: `${Colors.transparent}!important`,\n            },\n            '&:after': {\n                borderColor: `${Colors.transparent}!important`,\n            },\n        },\n        select: {\n            fontStyle: 'normal',\n            fontWeight: 500,\n            fontSize: 20,\n            lineHeight: '24px',\n            background: `${Colors.white}!important`,\n        },\n        selectIcon: {\n            display: 'none',\n        },\n        section: {},\n        load: {\n            filter: 'blur(4px)',\n            pointerEvents: 'none',\n        },\n        loadProgress: {\n            position: 'absolute',\n            left: 'calc(50% - 48px)',\n            top: 'calc(50% - 48px)',\n            zIndex: 1,\n        },\n        notAvailable: {\n            fontWeight: 600,\n        },\n    }),\n);\n\nconst Border = styled.div`\n    position: relative;\n    margin-left: 19px;\n    margin-bottom: 42px;\n    &:after {\n        content: '';\n        background: rgba(33, 33, 33, 0.08);\n        position: absolute;\n        left: -19px;\n        top: 100%;\n        height: 1px;\n        width: 100%;\n        margin-top: 5px;\n    }\n`;\n\nconst GalleryPage: FC = () => {\n    const tile = useSelector(tileData);\n    const isLoadTileData = useSelector(getLoadTileData);\n    const dispatch = useDispatch();\n    const classes = useStyles();\n    const [album, setAlbum] = useState<string>('MyPersonalAlbum');\n    const [isTile, seIsTile] = useState<boolean>(true);\n    const isSingle = useSelector(isSinglePage);\n    const handleChange = (event: ChangeEvent<{ value: unknown }>) => {\n        setAlbum(event.target.value as string);\n    };\n    useEffect(() => {\n        const isTile: boolean = !isLoadTileData && tile.length > 0;\n        seIsTile(isTile);\n    }, [isLoadTileData]);\n\n    /**\n     * return back to the page with the gallery\n     */\n    const gotToBack = () => {\n        dispatch(setSinglePage(''));\n        dispatch(setDownloadFile(''));\n        const script: HTMLScriptElement[] | any = document.querySelector('#dsd-content-player');\n        script && script.remove();\n    };\n\n    return (\n        <section className={classes.section}>\n            {isLoadTileData && <CircularProgress className={classes.loadProgress} />}\n            {!isLoadTileData && isTile && (\n                <div className={`${isLoadTileData ? classes.load : undefined}`}>\n                    <Toolbar className={classes.toolbarAction}>\n                        <Button onClick={gotToBack} variant=\"contained\" color=\"primary\" className={classes.action}>\n                            GALLERY\n                        </Button>\n                        <Button variant=\"outlined\" className={`${classes.action} ${classes.actionOutlined}`}>\n                            CREATE\n                        </Button>\n                    </Toolbar>\n                    <Toolbar>\n                        <Border>\n                            <FormControl className={classes.formControl}>\n                                <Select\n                                    labelId=\"simple-select-label\"\n                                    id=\"simple-select\"\n                                    value={album}\n                                    onChange={handleChange}\n                                    className={classes.formSelect}\n                                    classes={{\n                                        select: classes.select,\n                                        icon: classes.selectIcon,\n                                    }}\n                                >\n                                    <MenuItem value=\"MyPersonalAlbum\">My Personal Album</MenuItem>\n                                    <MenuItem value=\"MyPersonalAlbum1\">My Personal Album 1</MenuItem>\n                                    <MenuItem value=\"MyPersonalAlbum2\">My Personal Album 2</MenuItem>\n                                </Select>\n                            </FormControl>\n                        </Border>\n                    </Toolbar>\n                    <Suspense fallback={<div>Loading...</div>}>\n                        {!isSingle && <ImagesPage />}\n                        {isSingle && <SinglePage />}\n                    </Suspense>\n                </div>\n            )}\n            {!isLoadTileData && !isTile && (\n                <Typography\n                    variant=\"subtitle1\"\n                    align=\"center\"\n                    className={`${classes.notAvailable} ${classes.loadProgress}`}\n                >\n                    N/A (not available)\n                </Typography>\n            )}\n        </section>\n    );\n};\n\nexport default GalleryPage;\n"],"sourceRoot":""}